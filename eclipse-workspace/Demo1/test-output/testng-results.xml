<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" total="8" passed="5">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="109" started-at="2019-11-12T09:25:06Z" finished-at="2019-11-12T09:25:07Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="46" started-at="2019-11-12T09:25:06Z" finished-at="2019-11-12T09:25:06Z">
      <class name="test.NewTest3">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:test.NewTest3@1c53fd30]" name="beforeTest" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.NewTest3@1c53fd30]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:test.NewTest3@1c53fd30]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:test.NewTest3@1c53fd30]" name="beforeClass" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="f()[pri:0, instance:test.NewTest3@1c53fd30]" name="f" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.NewTest3@1c53fd30]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:test.NewTest3@1c53fd30]" name="afterTest" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- test.NewTest3 -->
      <class name="test.NewTest1">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:test.NewTest1@71f2a7d5]" name="beforeClass" is-config="true" duration-ms="16" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String)[pri:0, instance:test.NewTest1@71f2a7d5]" name="f" duration-ms="0" started-at="2019-11-12T14:55:06Z" data-provider="inputCredentials" finished-at="2019-11-12T14:55:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Lalitha]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[password123]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotEquals(Assert.java:856)
	at org.testng.Assert.assertNotEquals(Assert.java:861)
	at test.NewTest1.f(NewTest1.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:663)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:849)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1157)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1200)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1125)
	at org.testng.TestNG.run(TestNG.java:1033)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.NewTest1@71f2a7d5]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.NewTest1@71f2a7d5]" name="afterMethod" is-config="true" duration-ms="15" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String)[pri:0, instance:test.NewTest1@71f2a7d5]" name="f" duration-ms="0" started-at="2019-11-12T14:55:06Z" data-provider="inputCredentials" finished-at="2019-11-12T14:55:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[password456]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotEquals(Assert.java:856)
	at org.testng.Assert.assertNotEquals(Assert.java:861)
	at test.NewTest1.f(NewTest1.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:663)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:849)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1157)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1200)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1125)
	at org.testng.TestNG.run(TestNG.java:1033)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.NewTest1@71f2a7d5]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.NewTest1@71f2a7d5]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.NewTest1@71f2a7d5]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String)[pri:0, instance:test.NewTest1@71f2a7d5]" name="f" duration-ms="0" started-at="2019-11-12T14:55:06Z" data-provider="inputCredentials" finished-at="2019-11-12T14:55:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[abcd]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ghfgh]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.assertNotEquals(Assert.java:856)
	at org.testng.Assert.assertNotEquals(Assert.java:861)
	at test.NewTest1.f(NewTest1.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:663)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:849)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1157)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1200)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1125)
	at org.testng.TestNG.run(TestNG.java:1033)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.NewTest1@71f2a7d5]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:test.NewTest1@71f2a7d5]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- test.NewTest1 -->
    </test> <!-- Test -->
    <test name="Test1" duration-ms="16" started-at="2019-11-12T09:25:07Z" finished-at="2019-11-12T09:25:07Z">
      <class name="test.NewTest">
        <test-method status="PASS" signature="b()[pri:0, instance:test.NewTest@546a03af]" name="b" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- b -->
        <test-method status="PASS" signature="testTestMe()[pri:0, instance:test.NewTest@546a03af]" name="testTestMe" duration-ms="16" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTestMe -->
        <test-method status="PASS" signature="a()[pri:0, instance:test.NewTest@546a03af]" name="a" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- a -->
        <test-method status="PASS" signature="testTwitter()[pri:0, instance:test.NewTest@546a03af]" name="testTwitter" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwitter -->
        <test-method status="PASS" signature="b()[pri:0, instance:test.NewTest@546a03af]" name="b" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- b -->
        <test-method status="PASS" signature="x()[pri:0, instance:test.NewTest@546a03af]" name="x" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- x -->
        <test-method status="PASS" signature="a()[pri:0, instance:test.NewTest@546a03af]" name="a" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- a -->
        <test-method status="PASS" signature="b()[pri:0, instance:test.NewTest@546a03af]" name="b" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- b -->
        <test-method status="PASS" signature="testfacebook()[pri:0, instance:test.NewTest@546a03af]" name="testfacebook" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testfacebook -->
        <test-method status="PASS" signature="a()[pri:0, instance:test.NewTest@546a03af]" name="a" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- a -->
        <test-method status="PASS" signature="m()[pri:0, instance:test.NewTest@546a03af]" name="m" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m -->
      </class> <!-- test.NewTest -->
      <class name="test.NewTest3">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:test.NewTest3@7907ec20]" name="beforeSuite" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:06Z" finished-at="2019-11-12T14:55:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:test.NewTest3@7907ec20]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:test.NewTest3@7907ec20]" name="beforeClass" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:test.NewTest3@7907ec20]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="f()[pri:0, instance:test.NewTest3@7907ec20]" name="f" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:test.NewTest3@7907ec20]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:test.NewTest3@7907ec20]" name="beforeTest" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:test.NewTest3@7907ec20]" name="afterTest" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:test.NewTest3@7907ec20]" name="afterSuite" is-config="true" duration-ms="0" started-at="2019-11-12T14:55:07Z" finished-at="2019-11-12T14:55:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- test.NewTest3 -->
    </test> <!-- Test1 -->
  </suite> <!-- Suite -->
</testng-results>
